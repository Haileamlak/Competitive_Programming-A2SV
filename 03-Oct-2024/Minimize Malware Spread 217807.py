# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        infected = set(initial)

        parent = [i for i in range(n)]
        size = [1 for _ in range(n)]
        number_of_infected = [1 if i in infected else 0 for i in range(n)]

        def get(x):
            root = x
            while root != parent[root]:
                root = parent[root]

            while x != parent[x]:
                x, parent[x] = parent[x], root
            
            return x
        
        def union(x, y):
            px, py = get(x), get(y)

            if px != py:
                if size[px] > size[py]:
                    px, py = py, px
                
                parent[px] = py
                size[py] += size[px]
                number_of_infected[py] += number_of_infected[px]
        
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    union(i, j)

        initial.sort()
        res = [initial[0], 0]
        for i in initial:
            if number_of_infected[get(i)] == 1 and size[get(i)] > res[1]:
                res = [i, size[get(i)]]

        return res[0]